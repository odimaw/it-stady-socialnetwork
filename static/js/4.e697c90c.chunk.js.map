{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/NewMessage/NewMessage.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/NewMessage/NewMessage.jsx","components/Dialogs/NewMessage/NewMessageContainer.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","src","avatar","to","name","Message","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","NewMessage","postsBlock","values","addMessageActionCreator","newMessageBody","NewMessageContainer","connect","state","newMessage","dialogsPage","dispatch","addNewMessage","Dialogs","myFriends","friends","map","d","key","messagesElements","messages","m","dialogs","dialogsItems","compose","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,0B,oBCAjLD,EAAOC,QAAU,CAAC,WAAa,iC,8FCahBC,EAVI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC9B,yBAAKC,IAAKP,EAAMQ,SACjB,kBAAC,IAAD,CAASC,GAAIR,GAAOD,EAAMU,QCFvBC,EAJC,SAACX,GACb,OAAO,yBAAKG,UAAWC,IAAEC,QAASL,EAAMY,U,6DCgBtCC,EAAYC,YAAiB,IAa7BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAXL,SAAChB,GACtB,OAAQ,0BAAMkB,SAAUlB,EAAMmB,cAC5B,6BACE,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAC/CH,KAAK,iBAAiBe,YAAY,uBAEpC,oDAMSC,EA5BI,SAAC1B,GAMlB,OAAQ,yBAAKG,UAAWC,IAAEuB,YACxB,0CACA,6BACE,kBAACZ,EAAD,CAAqBG,SAPL,SAACU,GACnB5B,EAAM6B,wBAAwBD,EAAOE,sBCY1BC,EAFaC,aAdN,SAACC,GACrB,MAAO,CACLC,WAAYD,EAAME,YAAYD,eAIT,SAACE,GACxB,MAAO,CACLP,wBAAyB,SAACQ,GACxBD,EAASP,YAAwBQ,QAKXL,CAA6CN,GCU1DY,EAtBC,SAACtC,GAEb,IAAIuC,EAAYvC,EAAMwC,QACjBC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYhC,KAAMgC,EAAEhC,KAAMiC,IAAKD,EAAExC,GAAIA,GAAIwC,EAAExC,GAAIM,OAAQkC,EAAElC,YACnEoC,EAAmB5C,EAAM6C,SACxBJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASlC,QAASkC,EAAElC,QAAS+B,IAAKG,EAAE5C,GAAIA,GAAG,QAIzD,OAAQ,yBAAKC,UAAWC,IAAE2C,SACtB,yBAAK5C,UAAWC,IAAE4C,cACbT,GAEL,yBAAKpC,UAAWC,IAAEyC,UACbD,GAEL,6BACI,kBAAC,EAAD,S,gBCLGK,sBACbjB,aAfoB,SAACC,GAErB,MAAO,CACLO,QAASP,EAAMM,UAAUC,QACzBK,SAAUZ,EAAME,YAAYU,aAKP,SAACT,GACxB,MAAO,MAMPc,IAFaD,CAGbX","file":"static/js/4.e697c90c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialog\":\"Dialogs_dialog__lk_cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"NewMessage_postsBlock__Ov2N1\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport { NavLink } from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    let path = \"/dialogs/\" + props.id;\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n             <img src={props.avatar} ></img>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n    return <div className={s.dialog}>{props.message}</div>\n}\n\nexport default Message;","import React from 'react';\nimport s from './NewMessage.module.css';\nimport { Field, reduxForm } from 'redux-form';\nimport { Textarea } from '../../common/FormsControls/FormsControls';\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\n\nconst NewMessage = (props) => {\n\n  let addNewMessage = (values) => {\n    props.addMessageActionCreator(values.newMessageBody);\n  }\n\n  return (<div className={s.postsBlock}>\n    <h3>My message</h3>\n    <div>\n      <AddMessageFormRedux onSubmit={addNewMessage} />\n    </div>\n  </div>)\n};\n\nconst maxLength = maxLengthCreator(50);\n\nconst addMessageForm = (props) => {\n  return (<form onSubmit={props.handleSubmit}>\n    <div>\n      <Field component={Textarea} validate={[required, maxLength]}\n        name='newMessageBody' placeholder='Enter your message' />\n\n      <button>Add message</button></div>\n  </form>\n  )\n}\n\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(addMessageForm)\nexport default NewMessage;\n","import s from './NewMessage.module.css';\nimport { addMessageActionCreator } from '../../../redux/dialogs-reducer';\nimport NewMessage from './NewMessage';\nimport { connect } from 'react-redux';\n\nlet mapStateToProps = (state) => {\n  return {\n    newMessage: state.dialogsPage.newMessage,\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addMessageActionCreator: (addNewMessage) => {\n      dispatch(addMessageActionCreator(addNewMessage));\n    }\n  }\n}\n\nconst NewMessageContainer = connect(mapStateToProps, mapDispatchToProps)(NewMessage);\n\nexport default NewMessageContainer;\n","import React from 'react';\nimport s from './Dialogs.module.css';\nimport { Redirect } from \"react-router-dom\";\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport NewMessageContainer from './NewMessage/NewMessageContainer';\n\nconst Dialogs = (props) => {\n\n    let myFriends = props.friends\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id} avatar={d.avatar} />);\n    let messagesElements = props.messages\n        .map(m => <Message message={m.message} key={m.id} id='' />);\n\n    // if (!props.isAuth) return <Redirect to={'/login'} />;\n\n    return (<div className={s.dialogs}>\n        <div className={s.dialogsItems}>\n            {myFriends}\n        </div>\n        <div className={s.messages}>\n            {messagesElements}\n        </div>\n        <div>\n            <NewMessageContainer />\n        </div>\n    </div>)\n}\n\nexport default Dialogs;","import { connect } from 'react-redux';\nimport Dialogs from './Dialogs';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nlet mapStateToProps = (state) => {\n\n  return {\n    friends: state.myFriends.friends,\n    messages: state.dialogsPage.messages,\n\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}